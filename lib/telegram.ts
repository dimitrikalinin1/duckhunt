const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN

export async function sendTelegramNotification(chatId: number, message: string) {
  if (!TELEGRAM_BOT_TOKEN) {
    console.warn("TELEGRAM_BOT_TOKEN not configured")
    return
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: "HTML",
      }),
    })

    if (!response.ok) {
      console.error("Failed to send Telegram notification:", await response.text())
    }
  } catch (error) {
    console.error("Telegram notification error:", error)
  }
}

export async function notifyPlayerTurn(chatId: number, playerRole: "duck" | "hunter", gameState: string) {
  const messages = {
    duck: {
      "duck-initial": "ü¶Ü –í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é!",
      duck: "ü¶Ü –¢–≤–æ–π —Ö–æ–¥! –ü–µ—Ä–µ–ª–µ—Ç–∏ –≤ –Ω–æ–≤—É—é –∫–ª–µ—Ç–∫—É",
      hunter: "‚è≥ –•–æ–¥ –æ—Ö–æ—Ç–Ω–∏–∫–∞... –ñ–¥–∏ –≤—ã—Å—Ç—Ä–µ–ª–∞",
      ended: "üéØ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!",
    },
    hunter: {
      "duck-initial": "‚è≥ –£—Ç–∫–∞ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é...",
      hunter: "üèπ –¢–≤–æ–π —Ö–æ–¥! –°—Ç—Ä–µ–ª—è–π –ø–æ –∫–ª–µ—Ç–∫–µ",
      duck: "‚è≥ –•–æ–¥ —É—Ç–∫–∏... –û–Ω–∞ –ø–µ—Ä–µ–ª–µ—Ç–∞–µ—Ç",
      ended: "üéØ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!",
    },
  }

  const message = messages[playerRole][gameState as keyof typeof messages.duck]
  if (message) {
    await sendTelegramNotification(chatId, message)
  }
}
