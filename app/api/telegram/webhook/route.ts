import { type NextRequest, NextResponse } from "next/server"

interface TelegramUpdate {
  update_id: number
  message?: {
    message_id: number
    from: {
      id: number
      first_name: string
      username?: string
    }
    chat: {
      id: number
      type: string
    }
    text?: string
  }
  callback_query?: {
    id: string
    from: {
      id: number
      first_name: string
      username?: string
    }
    message: {
      message_id: number
      chat: {
        id: number
      }
    }
    data: string
  }
}

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN

async function sendTelegramMessage(chatId: number, text: string, replyMarkup?: any) {
  const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      reply_markup: replyMarkup,
      parse_mode: "HTML",
    }),
  })

  return response.json()
}

export async function POST(request: NextRequest) {
  try {
    const update: TelegramUpdate = await request.json()

    if (update.message) {
      const { chat, text, from } = update.message

      if (text === "/start") {
        const keyboard = {
          inline_keyboard: [
            [
              { text: "ü¶Ü –ò–≥—Ä–∞—Ç—å –∑–∞ —É—Ç–∫—É", callback_data: "play_duck" },
              { text: "üèπ –ò–≥—Ä–∞—Ç—å –∑–∞ –æ—Ö–æ—Ç–Ω–∏–∫–∞", callback_data: "play_hunter" },
            ],
            [
              { text: "üéÆ –°–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏", callback_data: "create_lobby" },
              { text: "üîç –ù–∞–π—Ç–∏ –∏–≥—Ä—É", callback_data: "find_game" },
            ],
            [
              { text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "stats" },
              { text: "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data: "shop" },
            ],
          ],
        }

        await sendTelegramMessage(
          chat.id,
          `ü¶Ü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Duck Hunter!</b>\n\n` + `–ü—Ä–∏–≤–µ—Ç, ${from.first_name}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`,
          keyboard,
        )
      }

      if (text === "/help") {
        await sendTelegramMessage(
          chat.id,
          `üéØ <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>\n\n` +
            `ü¶Ü <b>–ó–∞ —É—Ç–∫—É:</b> –í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∏ –ø–µ—Ä–µ–ª–µ—Ç–∞–π, –∏–∑–±–µ–≥–∞—è –≤—ã—Å—Ç—Ä–µ–ª–æ–≤\n` +
            `üèπ <b>–ó–∞ –æ—Ö–æ—Ç–Ω–∏–∫–∞:</b> –°—Ç—Ä–µ–ª—è–π –ø–æ –∫–ª–µ—Ç–∫–∞–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏ –ø–æ–¥—Å—Ç—Ä–µ–ª–∏—Ç—å —É—Ç–∫—É\n\n` +
            `<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n` +
            `/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n` +
            `/help - –ü–æ–º–æ—â—å\n` +
            `/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
            `/shop - –ú–∞–≥–∞–∑–∏–Ω`,
        )
      }
    }

    if (update.callback_query) {
      const { data, from, message } = update.callback_query
      const chatId = message.chat.id

      switch (data) {
        case "play_duck":
          await sendTelegramMessage(
            chatId,
            `ü¶Ü –¢—ã –≤—ã–±—Ä–∞–ª –∏–≥—Ä–∞—Ç—å –∑–∞ —É—Ç–∫—É!\n\n` +
              `–ü–µ—Ä–µ–π–¥–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã: ${process.env.NEXT_PUBLIC_APP_URL || "https://your-app.vercel.app"}`,
          )
          break

        case "play_hunter":
          await sendTelegramMessage(
            chatId,
            `üèπ –¢—ã –≤—ã–±—Ä–∞–ª –∏–≥—Ä–∞—Ç—å –∑–∞ –æ—Ö–æ—Ç–Ω–∏–∫–∞!\n\n` +
              `–ü–µ—Ä–µ–π–¥–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã: ${process.env.NEXT_PUBLIC_APP_URL || "https://your-app.vercel.app"}`,
          )
          break

        case "create_lobby":
          await sendTelegramMessage(
            chatId,
            `üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏...\n\n` +
              `–ü–µ—Ä–µ–π–¥–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${process.env.NEXT_PUBLIC_APP_URL || "https://your-app.vercel.app"}/lobby`,
          )
          break

        case "find_game":
          await sendTelegramMessage(
            chatId,
            `üîç –ü–æ–∏—Å–∫ –∏–≥—Ä—ã...\n\n` +
              `–ü–µ—Ä–µ–π–¥–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${process.env.NEXT_PUBLIC_APP_URL || "https://your-app.vercel.app"}/lobby`,
          )
          break

        case "stats":
          await sendTelegramMessage(
            chatId,
            `üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n` +
              `üèÜ –ü–æ–±–µ–¥: 0\n` +
              `üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: 0\n` +
              `üéØ –¢–æ—á–Ω–æ—Å—Ç—å: 0%\n\n` +
              `–ù–∞—á–Ω–∏ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!`,
          )
          break

        case "shop":
          await sendTelegramMessage(
            chatId,
            `üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤:\n\n` +
              `–ü–µ—Ä–µ–π–¥–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫: ${process.env.NEXT_PUBLIC_APP_URL || "https://your-app.vercel.app"}/shop`,
          )
          break
      }
    }

    return NextResponse.json({ ok: true })
  } catch (error) {
    console.error("Telegram webhook error:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}
